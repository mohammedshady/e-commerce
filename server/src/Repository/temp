{
    foreach ($items as $item) {
        // Extract product and attributes from each item
        $product = $item['product'];
        $attributes = $item['attributes'];
        $quantity = $item['quantity'];

        // Prepare query to get attribute spec IDs
        $query = "SELECT pai.spec_id FROM product_attribute_items pai JOIN items i ON pai.item_id = i.id WHERE pai.product_id = ?";
        $params = [$product];

        // Dynamically add each attribute to the WHERE clause
        foreach ($attributes as $attribute) {
            $query .= " AND (pai.attribute_id = ? AND i.item_value = ?)";
            $params[] = $attribute["name"];
            $params[] = $attribute["value"];
        }

        // Fetch attribute spec IDs
        $attributeSpecIds = (new static)->db->query($query, $params)->get();
        $attributeSpecIds = array_column($attributeSpecIds, 'spec_id');

        $attributeSetName = uniqid('', true);

        $insertAttributesQuery = "INSERT INTO product_attribute_sets (attribute_set, attribute) VALUES ";
        $insertAttributeValues = [];

        foreach ($attributeSpecIds as $specId) {
            $insertAttributeValues[] = "('$attributeSetName', '$specId')";
        }
        // Execute attribute insertion
        if (!empty($insertAttributeValues)) {
            $insertAttributesQuery .= implode(', ', $insertAttributeValues);
            (new static)->db->query($insertAttributesQuery);
        }

        // Now insert into order_items
        //     $insertOrderItemsQuery = "INSERT INTO order_items (product_id, quantity, product_attribute_set) VALUES (?, ?, ?)";
        //     $stmt = (new static)->db->prepare($insertOrderItemsQuery);

        //     // Insert into order_items using the attribute set
        //     $stmt->execute([$product, $quantity, $attributeSetName]);
        //     $orderItemId = (new static)->db->lastInsertId(); // Get the last inserted ID

        //     // Finally, insert into orders
        //     $insertOrderQuery = "INSERT INTO orders (items_id) VALUES (?)";
        //     $stmt = (new static)->db->prepare($insertOrderQuery);
        //     $stmt->execute([$orderItemId]);
        // }
        // $orderId = (new static)->db->lastInsertId();
        // return $orderId;


    }